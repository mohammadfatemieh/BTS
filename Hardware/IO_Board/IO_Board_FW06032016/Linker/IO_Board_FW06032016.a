;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3/6/2016
;Author  : Tuan
;Company : ATTECH
;Comments:  This code for IO_Board v3
;- Have 9 relay with 9 DryOut "NC" for indicate ERROR : Water inside; Low AC Power; Low DC Power;
;- Measure AC Voltage by Transformer 220V to 12V AC
;- Measure DC Voltage 48V DC
;- Have 2 DryIN for Gate Sensor and Smoke Sensor
;- One ADC in for detect Water inside
;- One Relay to power 12V DC for Smoke Sensor
;
;
;Chip type               : ATmega88
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega88.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000009 VOL: 0
	#endif
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;
;// Define hardware for Basic Board
;// 9 Relay to BTS system for indicate something Wrong
;// Define hardware
;#define Relay1 PORTB.4// for water detected
;#define Relay2 PORTB.3// Temp > 25oC
;#define Relay3 PORTB.2//Humi > 80 %RH
;#define Relay4 PORTB.1 // for smoke detected
;#define Relay5 PORTB.0 // Fired, temp > 60oC
;#define Relay6 PORTD.7 // AC Volt < 180V
;#define Relay7 PORTD.6 //DC Volt < 43V
;#define Relay8 PORTD.5 // System failre
;#define Relay9 PORTD.4 // Lost power (mat dien luoi)
;
;// 1 Relay cap nguon cho sensor khoi
;#define Smoke_Power PORTC.0
;
;
;#define RS485_TxD PORTC.5
;
;//2 logic port to plug dry contact sensor : smoke and gate open
;#define LG_IN_1 PIND.3
;#define LG_IN_2 PIND.2
;
;#define ALL_RL_ON   Relay1=1;Relay2=1;Relay3=1;Relay4=1;Relay5=1;Relay6=1;Relay7=1;Relay8=1;Relay9=1;
;#define ALL_RL_OFF   Relay1=0;Relay2=0;Relay3=0;Relay4=0;Relay5=0;Relay6=0;Relay7=0;Relay8=0;Relay9=0
;
;#define Water_ADC 1
;#define AC_ADC 2
;#define DC_ADC 3
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0066 {

	.CSEG
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0067 char status,data;
; 0000 0068 status=UCSR0A;
;PCODE: $0000000E VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0069 data=UDR0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 006A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 006B    {
; 0000 006C 
; 0000 006D    }
; 0000 006E }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;
;
;
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0076 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0077 RS485_TxD=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0078 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 007E {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 007F // Place your code here
; 0000 0080 
; 0000 0081 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;#define ADC_VREF_TYPE 0x40
;#define FIRST_ADC_INPUT 1
;#define LAST_ADC_INPUT 3
;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 008B {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 008C static unsigned char input_index=0;
; 0000 008D // Read the AD conversion result
; 0000 008E adc_data[input_index]=ADCW;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 008F // Select next ADC input
; 0000 0090 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0091    input_index=0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0092 ADMUX=(FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff))+input_index;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0093 // Delay needed for the stabilization of the ADC input voltage
; 0000 0094 delay_us(10);
;PCODE: $0000003B VOL: 0
; 0000 0095 // Start the AD conversion
; 0000 0096 ADCSRA|=0x40;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0097 }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 009E {
;PCODE: $00000042 VOL: 0
; 0000 009F // Declare your local variables here
; 0000 00A0 
; 0000 00A1 // Crystal Oscillator division factor: 1
; 0000 00A2 #pragma optsize-
; 0000 00A3 CLKPR=0x80;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 00A4 CLKPR=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 00A5 #ifdef _OPTIMIZE_SIZE_
; 0000 00A6 #pragma optsize+
; 0000 00A7 #endif
; 0000 00A8 
; 0000 00A9 // Input/Output Ports initialization
; 0000 00AA // Port B initialization
; 0000 00AB // Func7=In Func6=In Func5=In Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00AC // State7=T State6=T State5=T State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00AD PORTB=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 00AE DDRB=0x1F;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 00AF 
; 0000 00B0 // Port C initialization
; 0000 00B1 // Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=Out
; 0000 00B2 // State6=T State5=0 State4=T State3=T State2=T State1=T State0=0
; 0000 00B3 PORTC=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 00B4 DDRC=0x21;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 00B5 
; 0000 00B6 // Port D initialization
; 0000 00B7 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 00B8 // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 00B9 PORTD=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 00BA DDRD=0xF0;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 00BB 
; 0000 00BC // Timer/Counter 0 initialization
; 0000 00BD // Clock source: System Clock
; 0000 00BE // Clock value: 15.625 kHz
; 0000 00BF // Mode: Normal top=0xFF
; 0000 00C0 // OC0A output: Disconnected
; 0000 00C1 // OC0B output: Disconnected
; 0000 00C2 TCCR0A=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 00C3 TCCR0B=0x05;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00C4 TCNT0=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00C5 OCR0A=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00C6 OCR0B=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 00C7 
; 0000 00C8 // Timer/Counter 1 initialization
; 0000 00C9 // Clock source: System Clock
; 0000 00CA // Clock value: Timer1 Stopped
; 0000 00CB // Mode: Normal top=0xFFFF
; 0000 00CC // OC1A output: Discon.
; 0000 00CD // OC1B output: Discon.
; 0000 00CE // Noise Canceler: Off
; 0000 00CF // Input Capture on Falling Edge
; 0000 00D0 // Timer1 Overflow Interrupt: Off
; 0000 00D1 // Input Capture Interrupt: Off
; 0000 00D2 // Compare A Match Interrupt: Off
; 0000 00D3 // Compare B Match Interrupt: Off
; 0000 00D4 TCCR1A=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00D5 TCCR1B=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00D6 TCNT1H=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00D7 TCNT1L=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00D8 ICR1H=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00D9 ICR1L=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00DA OCR1AH=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00DB OCR1AL=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00DC OCR1BH=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00DD OCR1BL=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00DE 
; 0000 00DF // Timer/Counter 2 initialization
; 0000 00E0 // Clock source: System Clock
; 0000 00E1 // Clock value: Timer2 Stopped
; 0000 00E2 // Mode: Normal top=0xFF
; 0000 00E3 // OC2A output: Disconnected
; 0000 00E4 // OC2B output: Disconnected
; 0000 00E5 ASSR=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00E6 TCCR2A=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00E7 TCCR2B=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00E8 TCNT2=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00E9 OCR2A=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00EA OCR2B=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00EB 
; 0000 00EC // External Interrupt(s) initialization
; 0000 00ED // INT0: Off
; 0000 00EE // INT1: Off
; 0000 00EF // Interrupt on any change on pins PCINT0-7: Off
; 0000 00F0 // Interrupt on any change on pins PCINT8-14: Off
; 0000 00F1 // Interrupt on any change on pins PCINT16-23: Off
; 0000 00F2 EICRA=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00F3 EIMSK=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00F4 PCICR=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00F5 
; 0000 00F6 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00F7 TIMSK0=0x01;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00F8 
; 0000 00F9 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00FA TIMSK1=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00FB 
; 0000 00FC // Timer/Counter 2 Interrupt(s) initialization
; 0000 00FD TIMSK2=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00FE 
; 0000 00FF // USART initialization
; 0000 0100 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0101 // USART Receiver: On
; 0000 0102 // USART Transmitter: On
; 0000 0103 // USART0 Mode: Asynchronous
; 0000 0104 // USART Baud Rate: 115200 (Double Speed Mode)
; 0000 0105 UCSR0A=0x02;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0106 UCSR0B=0xD8;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0107 UCSR0C=0x06;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0108 UBRR0H=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0109 UBRR0L=0x10;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 010A 
; 0000 010B // Analog Comparator initialization
; 0000 010C // Analog Comparator: Off
; 0000 010D // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 010E ACSR=0x80;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 010F ADCSRB=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0110 DIDR1=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0111 
; 0000 0112 
; 0000 0113 // ADC initialization
; 0000 0114 // ADC Clock frequency: 1000.000 kHz
; 0000 0115 // ADC Voltage Reference: AVCC pin
; 0000 0116 // ADC Auto Trigger Source: ADC Stopped
; 0000 0117 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 0118 // ADC4: On, ADC5: On
; 0000 0119 DIDR0=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 011A ADMUX=FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 011B ADCSRA=0xCC;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 011C 
; 0000 011D 
; 0000 011E 
; 0000 011F // SPI initialization
; 0000 0120 // SPI disabled
; 0000 0121 SPCR=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0122 
; 0000 0123 // TWI initialization
; 0000 0124 // TWI disabled
; 0000 0125 TWCR=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0126 
; 0000 0127 // Global enable interrupts
; 0000 0128 #asm("sei")
;PCODE: $000000A3 VOL: 0
	sei
;PCODE: $000000A4 VOL: 0
; 0000 0129 RS485_TxD=1;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 012A printf("Hi all");
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 012B while (1)
;PCODE: $000000AE VOL: 0
; 0000 012C       {
; 0000 012D       // Place your code here
; 0000 012E       RS485_TxD=1;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 012F       printf(">ADC value: %d;%d;%d \r\n",adc_data[0],adc_data[1],adc_data[2]);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0130       delay_ms(100);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0131       }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0132 }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
