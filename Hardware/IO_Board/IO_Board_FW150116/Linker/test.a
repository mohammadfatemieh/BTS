;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3/15/2016
;Author  : Tuan
;Company : ATTECH
;Comments:
;
;
;Chip type               : ATmega88
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega88.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000009 VOL: 0
	#endif
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;#include <delay.h>
;// Standard Input/Output functions
;#include <stdio.h>
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define RS485_TxD PORTC.5
;unsigned char mailanancut=0,hihi;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0042 {

	.CSEG
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0043 char status,data;
; 0000 0044 status=UCSR0A;
;PCODE: $0000000E VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0045 data=UDR0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0046 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0047    {
; 0000 0048      mailanancut=1;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0049      //putchar(data);
; 0000 004A      //RS485_TxD=1;
; 0000 004B    }
; 0000 004C }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0052 {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0053 RS485_TxD=0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0054 }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 005C {
;PCODE: $00000024 VOL: 0
; 0000 005D // Declare your local variables here
; 0000 005E 
; 0000 005F // Crystal Oscillator division factor: 1
; 0000 0060 #pragma optsize-
; 0000 0061 CLKPR=0x80;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0062 CLKPR=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0063 #ifdef _OPTIMIZE_SIZE_
; 0000 0064 #pragma optsize+
; 0000 0065 #endif
; 0000 0066 
; 0000 0067 // Input/Output Ports initialization
; 0000 0068 // Port B initialization
; 0000 0069 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006B PORTB=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 006C DDRB=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 006D 
; 0000 006E // Port C initialization
; 0000 006F // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0070 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0071 PORTC=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0072 DDRC=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0073 DDRC.5=1;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0074 // Port D initialization
; 0000 0075 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0076 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0077 PORTD=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0078 DDRD=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0079 
; 0000 007A // Timer/Counter 0 initialization
; 0000 007B // Clock source: System Clock
; 0000 007C // Clock value: Timer 0 Stopped
; 0000 007D // Mode: Normal top=0xFF
; 0000 007E // OC0A output: Disconnected
; 0000 007F // OC0B output: Disconnected
; 0000 0080 TCCR0A=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0081 TCCR0B=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0082 TCNT0=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0083 OCR0A=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0084 OCR0B=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0085 
; 0000 0086 // Timer/Counter 1 initialization
; 0000 0087 // Clock source: System Clock
; 0000 0088 // Clock value: Timer1 Stopped
; 0000 0089 // Mode: Normal top=0xFFFF
; 0000 008A // OC1A output: Discon.
; 0000 008B // OC1B output: Discon.
; 0000 008C // Noise Canceler: Off
; 0000 008D // Input Capture on Falling Edge
; 0000 008E // Timer1 Overflow Interrupt: Off
; 0000 008F // Input Capture Interrupt: Off
; 0000 0090 // Compare A Match Interrupt: Off
; 0000 0091 // Compare B Match Interrupt: Off
; 0000 0092 TCCR1A=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0093 TCCR1B=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0094 TCNT1H=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0095 TCNT1L=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0096 ICR1H=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0097 ICR1L=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0098 OCR1AH=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0099 OCR1AL=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 009A OCR1BH=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 009B OCR1BL=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 009C 
; 0000 009D // Timer/Counter 2 initialization
; 0000 009E // Clock source: System Clock
; 0000 009F // Clock value: Timer2 Stopped
; 0000 00A0 // Mode: Normal top=0xFF
; 0000 00A1 // OC2A output: Disconnected
; 0000 00A2 // OC2B output: Disconnected
; 0000 00A3 ASSR=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00A4 TCCR2A=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00A5 TCCR2B=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00A6 TCNT2=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 00A7 OCR2A=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00A8 OCR2B=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00A9 
; 0000 00AA // External Interrupt(s) initialization
; 0000 00AB // INT0: Off
; 0000 00AC // INT1: Off
; 0000 00AD // Interrupt on any change on pins PCINT0-7: Off
; 0000 00AE // Interrupt on any change on pins PCINT8-14: Off
; 0000 00AF // Interrupt on any change on pins PCINT16-23: Off
; 0000 00B0 EICRA=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00B1 EIMSK=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00B2 PCICR=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00B3 
; 0000 00B4 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00B5 TIMSK0=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00B6 
; 0000 00B7 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00B8 TIMSK1=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00B9 
; 0000 00BA // Timer/Counter 2 Interrupt(s) initialization
; 0000 00BB TIMSK2=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00BC 
; 0000 00BD // USART initialization
; 0000 00BE // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00BF // USART Receiver: On
; 0000 00C0 // USART Transmitter: On
; 0000 00C1 // USART0 Mode: Asynchronous
; 0000 00C2 // USART Baud Rate: 115200
; 0000 00C3 UCSR0A=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00C4 UCSR0B=0xD8;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00C5 UCSR0C=0x06;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00C6 UBRR0H=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00C7 UBRR0L=0x08;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00C8 
; 0000 00C9 // Analog Comparator initialization
; 0000 00CA // Analog Comparator: Off
; 0000 00CB // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00CC ACSR=0x80;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00CD ADCSRB=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00CE DIDR1=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00CF 
; 0000 00D0 // ADC initialization
; 0000 00D1 // ADC disabled
; 0000 00D2 ADCSRA=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00D3 
; 0000 00D4 // SPI initialization
; 0000 00D5 // SPI disabled
; 0000 00D6 SPCR=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00D7 
; 0000 00D8 // TWI initialization
; 0000 00D9 // TWI disabled
; 0000 00DA TWCR=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00DB 
; 0000 00DC // Global enable interrupts
; 0000 00DD #asm("sei")
;PCODE: $00000083 VOL: 0
	sei
;PCODE: $00000084 VOL: 0
; 0000 00DE 
; 0000 00DF while (1)
;PCODE: $00000085 VOL: 0
; 0000 00E0       {
; 0000 00E1       // Place your code here
; 0000 00E2 
; 0000 00E3       if(mailanancut==1)
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00E4                 {
; 0000 00E5                     hihi=UCSR0A;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00E6                     while(hihi&(RX_COMPLETE));
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00E7                     delay_ms(10);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00E8                     RS485_TxD=1;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00E9                     printf("Mai Lan an Shit ^^\r\n");
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00EA                     mailanancut=0;
;PCODE: $0000009D VOL: 0
; 0000 00EB                 }
; 0000 00EC       }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00ED }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
