;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : AC measure
;Version : 1
;Date    : 4/18/2016
;Author  : swat
;Company :
;Comments:
;
;
;Chip type               : ATmega88PA
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega88a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;#include "acm.h"

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;	data -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;#include "ade7753.h"
;// SPI functions
;#include <spi.h>
;// Declare your global variables here
;
;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0025 {
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0026 // Reinitialize Timer 0 value
; 0000 0027 TCNT0=0x38;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0028 // Place your code here
; 0000 0029 if(time_out_run==1){
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 002A usart_time_out--;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 002B if(usart_time_out==0) time_out=1;}
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 002C time_to_check_ADE++;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 002D }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0031 {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0032 char status,data;
; 0000 0033 status=UCSR0A;
;PCODE: $000000AC VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0034 data=UDR0;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0035 usart_time_out=500;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0036 time_out=0;
;PCODE: $000000B3 VOL: 0
; 0000 0037 time_out_run=1;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0038 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0039    {
; 0000 003A    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 003B #if RX_BUFFER_SIZE0 == 256
; 0000 003C    // special case for receiver buffer size=256
; 0000 003D    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 003E #else
; 0000 003F    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0040    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0041       {
; 0000 0042       rx_counter0=0;
;PCODE: $000000C7 VOL: 0
; 0000 0043       rx_buffer_overflow0=1;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0044       }
; 0000 0045 #endif
; 0000 0046    }
;PCODE: $000000CA VOL: 0
; 0000 0047 }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;
;
;
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 004E {
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 004F RS485_TxD=0;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0050 }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;
;
;
;
;void main(void)
; 0000 0056 {
;PCODE: $000000D7 VOL: 0
; 0000 0057 // Declare your local variables here
; 0000 0058 
; 0000 0059 
; 0000 005A config_mcu();
;PCODE: $000000D8 VOL: 0
; 0000 005B // Global enable interrupts
; 0000 005C #asm("sei")
;PCODE: $000000D9 VOL: 0
	sei
;PCODE: $000000DA VOL: 0
; 0000 005D RS485_TxD=1;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 005E //while(usart_status&(RX_COMPLETE));
; 0000 005F printf("\r\n>ACM Unit v1 fwv1 18/04/2016\r\n");
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0060 
; 0000 0061 delay_ms(200);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0062               // Settings for Olimex Energy Shield #1 - Etel
; 0000 0063     // ------------------------------------
; 0000 0064     //ADE7753_analogSetup(GAIN_1, GAIN_1, 0, 0, FULLSCALESELECT_0_25V, INTEGRATOR_OFF);  // GAIN1, GAIN2, CH1OS, CH2OS,  ...
; 0000 0065     //ADE7753_rmsSetup( -0, +0 );                 // IRMSOS,VRMSOS  12-bit (S) [-2048 +2048] -- Refer to spec page 25, 2 ...
; 0000 0066     //ADE7753_energySetup(0, 0, 0, 0, 0, 0x0D); // WGAIN,WDIV,APOS,VAGAIN,VADIV,PHCAL  -- Refer to spec page 39, 31, 46, ...
; 0000 0067     //ADE7753_frequencySetup(0, 0);             // CFNUM,CFDEN  12-bit (U) -- for CF pulse output  -- Refer to spec page ...
; 0000 0068     //ADE7753_miscSetup(0, 0, 0, 0, 0, 0);   3450=0
; 0000 0069 ADE7753_analogSetup(GAIN_4, GAIN_1, -3,-2, FULLSCALESELECT_0_5V, INTEGRATOR_OFF);  // GAIN1, GAIN2, CH1OS, CH2OS, Range_ ...
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 006A ADE7753_rmsSetup( -60, -1999 );
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 006B //ADE7753_write16(WGAIN,0);
; 0000 006C //ADE7753_write16(CFDEN,6253);delay_ms(200);
; 0000 006D //ADE7753_write8(WDIV,4);// Chia cac loai cong suat cho WDIV :))
; 0000 006E //ADE7753_write16(WGAIN,131);delay_ms(200);
; 0000 006F //ADE7753_write16(APOS,-784);delay_ms(200);
; 0000 0070 //ADE7753_setMode(CYCMODE); //Mode energy accumulation begins.
; 0000 0071 //ADE7753_setLineCyc(1000);
; 0000 0072 //delay_ms(200);
; 0000 0073 //RS485_TxD=1;
; 0000 0074 //printf("CFDEN:%u\r\n",ADE7753_read16(CFDEN));delay_ms(200);
; 0000 0075 //RS485_TxD=1;
; 0000 0076 //printf("WGAIN:%u\r\n",ADE7753_read16(WGAIN));delay_ms(200);
; 0000 0077 //RS485_TxD=1;
; 0000 0078 //printf("WDIV:%u\r\n",ADE7753_read8(WDIV));delay_ms(200);
; 0000 0079 //RS485_TxD=1;
; 0000 007A //printf("APOS:%u\r\n",ADE7753_read8(APOS));
; 0000 007B Vpeak 	  = ADE7753_getVpeakReset() ;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 007C adc_data[0]=(int)(Vpeak/19.05);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 007D adc_data[7]=ADE7753_getPeriod();
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 007E IDC_Standby;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 007F usart_time_out=5000;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0080 time_out=0;
;PCODE: $0000010A VOL: 0
; 0000 0081 time_out_run=1;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0082 process_uart=1;// Clear buffer
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0083 while (1)
;PCODE: $0000010F VOL: 0
; 0000 0084       {
; 0000 0085       // Place your code here
; 0000 0086 
; 0000 0087 
; 0000 0088       if(time_out==1)
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0089       {
; 0000 008A         time_out=0;
;PCODE: $00000113 VOL: 0
; 0000 008B         time_out_run=0;
;PCODE: $00000114 VOL: 0
; 0000 008C         process_uart=1;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 008D       }
; 0000 008E       if(process_uart==1)
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 008F       {
; 0000 0090         // Chi nhan ban tin tu CPU_Unit ">CPU[REC_ID]r[checksum]<"
; 0000 0091         // In hex : ">CPU[0xMyIDHigh.0xMyIDLow]r[0xchecksum.0xchecksum]<"
; 0000 0092         //">CPU30r37<"
; 0000 0093         if((rx_buffer0[0]=='>')&&(rx_buffer0[1]=='C')&&(rx_buffer0[2]=='P')&&(rx_buffer0[3]=='U')&&(rx_buffer0[9]=='<')
; 0000 0094         &&(HexInCharToDec(rx_buffer0[5]) +  (HexInCharToDec(rx_buffer0[4])<<4) ==MyID)
; 0000 0095         &&(HexInCharToDec(rx_buffer0[8]) +  (HexInCharToDec(rx_buffer0[7])<<4) ==checksum))
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0096         {
; 0000 0097         RS485_TxD=1;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0098         //printf("CPU request!\r\n");// Phan hoi tat cac cac gia tri AC ADC????Co can cau hinh ADE ko????
; 0000 0099         printf(">ACM%02X%04X%04X%04X%04X%04X%04X%04X%04X%02X<",cpu_id,adc_data[0],adc_data[1],adc_data[2],adc_data[3],ad ...
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 009A         }
; 0000 009B         //RS485_TxD=1;
; 0000 009C         //printf("Mess:%s!\r\n",rx_buffer0);
; 0000 009D         process_uart=0;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 009E         for(usart_count=0;usart_count<RX_BUFFER_SIZE0;usart_count++)
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 009F                             {
; 0000 00A0                             rx_buffer0[usart_count]=0;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00A1                             }
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00A2                             rx_wr_index0=0;
;PCODE: $00000192 VOL: 0
; 0000 00A3       }
; 0000 00A4       if(time_to_check_ADE>10000)//1s
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00A5       {
; 0000 00A6         time_to_check_ADE=0;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00A7         Vrms 	  = ADE7753_vrms() ;    // Hieu dien the hieu dung, Vrms = Vpeak / sqrt(2)     , Vpeak la V max
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00A8         Irms 	  = ADE7753_irms() ;     // Cuong do dong dien hieu dung, Irms = Ipeak / sqrt(2)
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00A9         Ipeak 	  = ADE7753_getIpeakReset() ;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00AA         Vpeak 	  = ADE7753_getVpeakReset() ;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00AB         adc_data[7] = ADE7753_getPeriod();
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00AC 
; 0000 00AD         adc_data[0]=Vpeak;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00AE         adc_data[1]=Vrms;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00AF         adc_data[2]=Irms;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00B0         adc_data[3]=Ipeak;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00B1         //RS485_TxD=1;
; 0000 00B2         //printf("Vrms:%d;Vpeak:%d;Irms:%d;Ipeak:%d;PERIOD:%d\r\n",adc_data[1],adc_data[0],adc_data[2],adc_data[3],adc_d ...
; 0000 00B3       }
; 0000 00B4       }
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00B5 }
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;
;//delay_ms(500);
;//      delay_ms(500);
;//
;//      Vrms 	  = ADE7753_vrms() ;    // Hieu dien the hieu dung, Vrms = Vpeak / sqrt(2)     , Vpeak la V max
;//      Irms 	  = ADE7753_irms()-800 ;     // Cuong do dong dien hieu dung, Irms = Ipeak / sqrt(2)
;//      Vpeak 	  = ADE7753_getVpeakReset() ;
;//      Ipeak 	  = ADE7753_getIpeakReset() ;
;//      Frequency = ADE7753_getPeriod();
;//      //Vpeak 	  = ADE7753_getVpeakReset() ;
;//      //Vrms=2642412;
;//      delay_ms(500);
;//      RS485_TxD=1;
;//      //printf("test:%d\r\n",-32765);
;//      printf("Vrms:%d;Vpeak:%d;Irms:%d;Ipeak:%d;PERIOD:%d\r\n",Vrms,(int)(Vpeak/13.63),Irms,Ipeak,Frequency);
;
