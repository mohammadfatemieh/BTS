// Define hardware for Basic Board
// 10 Relays OMC system for indicate something Wrong
// Define hardware
unsigned char MyID =1;//OMC's ID :01~09
unsigned char cpu_id=0;
unsigned char checksum=0x22;
#define Relay1 PORTB.0// for water detected
#define Relay2 PORTD.7// Temp > 25oC
#define Relay3 PORTD.6//Humi > 80 %RH
#define Relay4 PORTD.5 // for smoke detected
#define Relay5 PORTD.4 // Fired, temp > 60oC
#define Relay6 PORTB.5 // AC Volt < 180V
#define Relay7 PORTB.4 //DC Volt < 43V
#define Relay8 PORTB.3 // System failre
#define Relay9 PORTB.2 // Lost power (mat dien luoi)
#define Relay10 PORTB.1



#define RS485_TxD PORTC.5
#define IDC_Send DDRC.4=1;PORTC.4=0;
#define IDC_Standby DDRC.4=0;PORTC.4=1;
unsigned char time_out,usart_count, time_out_run,process_uart;
unsigned int usart_time_out;
#define DATA_REGISTER_EMPTY (1<<UDRE0)
#define RX_COMPLETE (1<<RXC0)
#define FRAMING_ERROR (1<<FE0)
#define PARITY_ERROR (1<<UPE0)
#define DATA_OVERRUN (1<<DOR0)

// USART Receiver buffer
#define RX_BUFFER_SIZE0 50
char rx_buffer0[RX_BUFFER_SIZE0];

#if RX_BUFFER_SIZE0 <= 256
unsigned char rx_wr_index0=0;
#else
unsigned int rx_wr_index0=0;
#endif

#if RX_BUFFER_SIZE0 < 256
unsigned char rx_counter0=0;
#else
unsigned int rx_counter0=0;
#endif

// This flag is set on USART Receiver buffer overflow
bit rx_buffer_overflow0;

#define ALL_RL_ON   Relay1=1;Relay2=1;Relay3=1;Relay4=1;Relay5=1;Relay6=1;Relay7=1;Relay8=1;Relay9=1;Relay10=1;
#define ALL_RL_OFF   Relay1=0;Relay2=0;Relay3=0;Relay4=0;Relay5=0;Relay6=0;Relay7=0;Relay8=0;Relay9=0;Relay10=0;
#define GET_RL_STT (Relay10<<9)+(Relay9<<8)+(Relay8<<7)+(Relay7<<6)+(Relay6<<5)+(Relay5<<4)+(Relay4<<3)+(Relay3<<2)+(Relay2<<1)+Relay1
unsigned int cpu_cmd,omc_stt;


unsigned char HexInCharToDec(char data)
      {
            if((data>47)&&(data<58)) return (data-48);// 0...9
            if((data>63)&&(data<71)) return (data-55);//A..F
      }
      
void config_mcu(void)
{
    // Crystal Oscillator division factor: 1
#pragma optsize-
CLKPR=(1<<CLKPCE);
CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
#ifdef _OPTIMIZE_SIZE_
#pragma optsize+
#endif

// Input/Output Ports initialization
// Port B initialization
// Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

}

