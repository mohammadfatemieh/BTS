;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/18/2016
;Author  : swat
;Company : Unknown
;Comments:
;
;
;Chip type               : ATmega88PA
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega88a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "dcm2.h"

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;	data -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;// Declare your global variables here
;#include <delay.h>
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0024 {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0025 char status,data;
; 0000 0026 status=UCSR0A;
;PCODE: $00000033 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0027 data=UDR0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0028 usart_time_out=500;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0029 time_out=0;
;PCODE: $0000003A VOL: 0
; 0000 002A time_out_run=1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 002C    {
; 0000 002D    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 002E #if RX_BUFFER_SIZE0 == 256
; 0000 002F    // special case for receiver buffer size=256
; 0000 0030    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0031 #else
; 0000 0032    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0033    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0034       {
; 0000 0035       rx_counter0=0;
;PCODE: $0000004E VOL: 0
; 0000 0036       rx_buffer_overflow0=1;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0037       }
; 0000 0038 #endif
; 0000 0039    }
;PCODE: $00000051 VOL: 0
; 0000 003A }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 003F {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0040 
; 0000 0041    RS485_TxD=0;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0042 
; 0000 0043 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0048 {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0049 // Reinitialize Timer 0 value
; 0000 004A TCNT0=0x38;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 004B // Place your code here
; 0000 004C // Place your code here
; 0000 004D if(time_out_run==1){
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 004E usart_time_out--;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 004F if(usart_time_out==0) time_out=1;}
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0050 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;
;#define FIRST_ADC_INPUT 0
;#define LAST_ADC_INPUT 7
;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;#define ADC_VREF_TYPE 0x40
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 005A {
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 005B static unsigned char input_index=0;
; 0000 005C // Read the AD conversion result
; 0000 005D adc_data[input_index]=ADCW;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005E // Select next ADC input
; 0000 005F if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0060    input_index=0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0061 ADMUX=(FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff))+input_index;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0062 // Delay needed for the stabilization of the ADC input voltage
; 0000 0063 delay_us(10);
;PCODE: $00000085 VOL: 0
; 0000 0064 // Start the AD conversion
; 0000 0065 ADCSRA|=0x40;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0066 }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 006B {
;PCODE: $0000008C VOL: 0
; 0000 006C // Declare your local variables here
; 0000 006D 
; 0000 006E // Crystal Oscillator division factor: 1
; 0000 006F #pragma optsize-
; 0000 0070 CLKPR=0x80;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0071 CLKPR=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0072 #ifdef _OPTIMIZE_SIZE_
; 0000 0073 #pragma optsize+
; 0000 0074 #endif
; 0000 0075 
; 0000 0076 // Input/Output Ports initialization
; 0000 0077 // Port B initialization
; 0000 0078 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0079 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 007A PORTB=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 007B DDRB=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 007C 
; 0000 007D // Port C initialization
; 0000 007E // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007F // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0080 PORTC=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0081 DDRC=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0082 
; 0000 0083 // Port D initialization
; 0000 0084 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=In Func0=In
; 0000 0085 // State7=T State6=T State5=T State4=T State3=T State2=0 State1=T State0=T
; 0000 0086 PORTD=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0087 DDRD=0x04;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0088 
; 0000 0089 // Timer/Counter 0 initialization
; 0000 008A // Clock source: System Clock
; 0000 008B // Clock value: 2000.000 kHz
; 0000 008C // Mode: Normal top=0xFF
; 0000 008D // OC0A output: Disconnected
; 0000 008E // OC0B output: Disconnected
; 0000 008F TCCR0A=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0090 TCCR0B=0x02;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0091 TCNT0=0x38;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0092 OCR0A=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0093 OCR0B=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0094 
; 0000 0095 // Timer/Counter 1 initialization
; 0000 0096 // Clock source: System Clock
; 0000 0097 // Clock value: Timer1 Stopped
; 0000 0098 // Mode: Normal top=0xFFFF
; 0000 0099 // OC1A output: Discon.
; 0000 009A // OC1B output: Discon.
; 0000 009B // Noise Canceler: Off
; 0000 009C // Input Capture on Falling Edge
; 0000 009D // Timer1 Overflow Interrupt: Off
; 0000 009E // Input Capture Interrupt: Off
; 0000 009F // Compare A Match Interrupt: Off
; 0000 00A0 // Compare B Match Interrupt: Off
; 0000 00A1 TCCR1A=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00A2 TCCR1B=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00A3 TCNT1H=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00A4 TCNT1L=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00A5 ICR1H=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00A6 ICR1L=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00A7 OCR1AH=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00A8 OCR1AL=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00A9 OCR1BH=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00AA OCR1BL=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00AB 
; 0000 00AC // Timer/Counter 2 initialization
; 0000 00AD // Clock source: System Clock
; 0000 00AE // Clock value: Timer2 Stopped
; 0000 00AF // Mode: Normal top=0xFF
; 0000 00B0 // OC2A output: Disconnected
; 0000 00B1 // OC2B output: Disconnected
; 0000 00B2 ASSR=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00B3 TCCR2A=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00B4 TCCR2B=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00B5 TCNT2=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00B6 OCR2A=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00B7 OCR2B=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00B8 
; 0000 00B9 // External Interrupt(s) initialization
; 0000 00BA // INT0: Off
; 0000 00BB // INT1: Off
; 0000 00BC // Interrupt on any change on pins PCINT0-7: Off
; 0000 00BD // Interrupt on any change on pins PCINT8-14: Off
; 0000 00BE // Interrupt on any change on pins PCINT16-23: Off
; 0000 00BF EICRA=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00C0 EIMSK=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00C1 PCICR=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00C2 
; 0000 00C3 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00C4 TIMSK0=0x01;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00C5 
; 0000 00C6 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00C7 TIMSK1=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00C8 
; 0000 00C9 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00CA TIMSK2=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00CB 
; 0000 00CC // USART initialization
; 0000 00CD // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00CE // USART Receiver: On
; 0000 00CF // USART Transmitter: On
; 0000 00D0 // USART0 Mode: Asynchronous
; 0000 00D1 // USART Baud Rate: 115200 (Double Speed Mode)
; 0000 00D2 UCSR0A=0x02;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00D3 UCSR0B=0xD8;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00D4 UCSR0C=0x06;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00D5 UBRR0H=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00D6 UBRR0L=0x10;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00D7 
; 0000 00D8 // Analog Comparator initialization
; 0000 00D9 // Analog Comparator: Off
; 0000 00DA // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00DB ACSR=0x80;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00DC ADCSRB=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00DD DIDR1=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00DE 
; 0000 00DF // ADC initialization
; 0000 00E0 // ADC Clock frequency: 1000.000 kHz
; 0000 00E1 // ADC Voltage Reference: AVCC pin
; 0000 00E2 // ADC Auto Trigger Source: ADC Stopped
; 0000 00E3 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 00E4 // ADC4: On, ADC5: On
; 0000 00E5 DIDR0=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00E6 ADMUX=FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00E7 ADCSRA=0xCC;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00E8 
; 0000 00E9 // SPI initialization
; 0000 00EA // SPI disabled
; 0000 00EB SPCR=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00EC 
; 0000 00ED // TWI initialization
; 0000 00EE // TWI disabled
; 0000 00EF TWCR=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00F0 
; 0000 00F1 // Global enable interrupts
; 0000 00F2 #asm("sei")
;PCODE: $000000ED VOL: 0
	sei
;PCODE: $000000EE VOL: 0
; 0000 00F3 RS485_TxD=1;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F4 printf("\r\n>DC measure Unit v2 fwv1 18/04/2016\r\n");
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00F5 IDC_Standby;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00F6 usart_time_out=5000;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00F7 time_out=0;
;PCODE: $000000FE VOL: 0
; 0000 00F8 time_out_run=1;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00F9 process_uart=1;// Clear buffer
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00FA while (1)
;PCODE: $00000103 VOL: 0
; 0000 00FB       {
; 0000 00FC       // Place your code here
; 0000 00FD       if(time_out==1)
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00FE       {
; 0000 00FF         //RS485_TxD=1;
; 0000 0100             //while(usart_status&(RX_COMPLETE));
; 0000 0101         //printf("Time up!\r\n");
; 0000 0102         time_out=0;
;PCODE: $00000107 VOL: 0
; 0000 0103         time_out_run=0;
;PCODE: $00000108 VOL: 0
; 0000 0104         process_uart=1;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0105       }
; 0000 0106       if(process_uart==1)
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0107       {
; 0000 0108         // Chi nhan ban tin tu CPU_Unit ">CPU[REC_ID]r[checksum]<"
; 0000 0109         // In hex : ">CPU[0xMyIDHigh.0xMyIDLow]r[0xchecksum.0xchecksum]<"
; 0000 010A         //">CPU01r25<"
; 0000 010B         if((rx_buffer0[0]=='>')&&(rx_buffer0[1]=='C')&&(rx_buffer0[2]=='P')&&(rx_buffer0[3]=='U')&&(rx_buffer0[6]=='r')&&(rx_buffer0[9]=='<')
; 0000 010C         &&(HexInCharToDec(rx_buffer0[5]) +  (HexInCharToDec(rx_buffer0[4])<<4) ==MyID)
; 0000 010D         &&(HexInCharToDec(rx_buffer0[8]) +  (HexInCharToDec(rx_buffer0[7])<<4) ==checksum))
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 010E         {
; 0000 010F         cpu_cmd=1;// CPU gui lenh doc cac gia tri ADC
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0110         //RS485_TxD=1;
; 0000 0111         //printf("CPU cmd:%x\r\n",cpu_cmd);
; 0000 0112         }
; 0000 0113         //RS485_TxD=1;
; 0000 0114         //printf("Mess:%s!\r\n",rx_buffer0);
; 0000 0115         process_uart=0;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0116         for(usart_count=0;usart_count<RX_BUFFER_SIZE0;usart_count++)
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0117                             {
; 0000 0118                             rx_buffer0[usart_count]=0;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0119                             }
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 011A                             rx_wr_index0=0;
;PCODE: $0000015E VOL: 0
; 0000 011B       }
; 0000 011C 
; 0000 011D       if(cpu_cmd==1)
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 011E         {
; 0000 011F 
; 0000 0120             cpu_cmd=0;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0121             //Phan hoi lai ban tin cho CPU
; 0000 0122             // In hex : ">OMC[0xCPU_IDHigh.0xCPU_IDLow][0xomc_stt_High.0xomc_stt_High][0xomc_stt_Low.0xomc_stt_Low][0xchecksum.0xchecksum]<"
; 0000 0123             RS485_TxD=1;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0124             printf("ADC[0..7]:%d,%d,%d,%d,%d,%d,%d,%d\r\n",adc_data[0],adc_data[1],adc_data[2],adc_data[3],adc_data[4],adc_data[5],adc_data[6],adc_data[7]);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0125             //printf(">DCM%02X%04X%02X<",cpu_id,omc_stt,checksum);
; 0000 0126 
; 0000 0127         }
; 0000 0128       }
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0129 }
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
